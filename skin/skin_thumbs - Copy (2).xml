<krpano>
	<action name="skin_addthumbs">
		set(activethumbgroup, '');
		
		set(thumbgroup_count, 0);
		
		for(set(i,0), i LT scene.count, inc(i)
		,
			process_scene_thumb(get(i), get(scene[get(i)].name), get(scene[get(i)].group_id));
		);
	</action>
	
	<action name="process_scene_thumb" scope="local" args="scene_index, scene_name, thumb_group_id">
		<!-- %1:Scene.index, %2:scene.name, %3:thumb_group_id -->
		<!-- thumbgroup_count, thumbgroup_%3_created, thumbgroup_%3_thumbcount, thumbgroup_%3_parent, layer[thumbgroup_%3_parent].groupindex -->
		trace(get(scene_index), get(scene_name), get(thumb_group_id));
		ifnot(thumbgroup_%3_created
		,
			add_thumbgroup(get(scene_index), get(scene_name), get(thumb_group_id));
		);
		if(scene[%1].group_mainthumb
		,
			set(layer[thumbgroup_%3_parent].bgcolor, get(scene[%1].bgcolor));
		);
		
		add_thumb(get(scene_index), get(scene_name), get(thumb_group_id), get(scene[%1].id));
		
	</action>
	
	<action name="add_thumbgroup">
		addlayer(thumbgroup_%3_button);
		copy(group_button, layer[thumbgroup_%3_button]);
		set(group_button.url, "%SWFPATH%/skin/caption11.png");
		set(group_button.keep, true);
		set(group_button.align, topleft);
		set(group_button.width, 200);
		set(group_button.height, 100);
		set(group_button.x, calc:thumbgroup_count * 200);
		set(group_button.onclick, thumbgroupbutton_onclick(thumbgroup_%3_parent););
	
		addlayer(thumbgroup_%3_parent);
		set(layer[thumbgroup_%3_parent].type, container);
		set(layer[thumbgroup_%3_parent].visible, false);
		set(layer[thumbgroup_%3_parent].enabled, false);
		set(layer[thumbgroup_%3_parent].bgalpha, 0.2);
		set(layer[thumbgroup_%3_parent].keep, true);
		set(layer[thumbgroup_%3_parent].parent, 'skin_thumbs');
		set(layer[thumbgroup_%3_parent].align, right);
		set(layer[thumbgroup_%3_parent].x, 0);
		set(layer[thumbgroup_%3_parent].y, 0);
		set(layer[thumbgroup_%3_parent].width, 0);
		set(layer[thumbgroup_%3_parent].height, get(skin_settings.thumbs_height));
		
		set(layer[thumbgroup_%3_parent].groupindex, get(thumbgroup_count));
		
		set(thumbgroup_%3_created, true);
		set(thumbgroup_%3_thumbcount, 0);
		set_thumbgroup_array(get(thumbgroup_count), thumbgroup_%3_parent);
		set(layer[thumbgroup_%3_parent].y, 0);
		inc(thumbgroup_count);
	</action>
	
	<action name="add_thumb">
		addlayer(skin_thumb_%1);
		copy(layer[skin_thumb_%1].url, scene[%1].thumburl);
		set(layer[skin_thumb_%1].keep, true);
		set(layer[skin_thumb_%1].parent, 'thumbgroup_%3_parent');
		set(layer[skin_thumb_%1].align, right);
		set(layer[skin_thumb_%1].width, get(skin_settings.thumbs_width));
		set(layer[skin_thumb_%1].height, get(skin_settings.thumbs_height));
		set(layer[skin_thumb_%1].linkedscene, get(scene[%1].name));
		set(layer[skin_thumb_%1].onclick, thumb_onclick(%1); );
		set(layer[skin_thumb_%1].x, calc:thumbgroup_%3_thumbcount * (skin_settings.thumbs_width + skin_settings.thumbs_padding) + (skin_settings.thumbs_padding/2));
		set(layer[skin_thumb_%1].zorder, 1);
		set(layer[skin_thumb_%1].onover, trace(get(name)););
		set_thumbgroup_children_array(get(thumbgroup_%3_thumbcount), skin_thumb_%1, %3);
		
		mul(layer[skin_thumbs].width, get(thumbgroup_count), get(skin_settings.thumbs_totalwidth));
		
		set(scene[%1].title, get(maptxt-%4));
		inc(thumbgroup_%3_thumbcount);
		set(layer[thumbgroup_%3_parent].width, calc:thumbgroup_%3_thumbcount * (skin_settings.thumbs_width + skin_settings.thumbs_padding));
	</action>
	
	<action name="set_thumbgroup_array">
		set(thumbgroup_array_%1, %2);
	</action>
	
	<action name="thumb_onclick">
		set(layer[skin_thumbborder].parent, skin_thumb_%1);
		loadscene(get(layer[skin_thumb_%1].linkedscene), null, MERGE, BLEND(0.5));
	</action>
	
	<action name="thumbgroupbutton_onclick">
		if(activethumbgroup == ''
		,
			set(layer[%1].visible, true);
			set(layer[%1].enabled, true);
			set(layer[skin_thumbs].width, get(layer[%1].width));
			
			set(activethumbgroup, %1);
		,
			if(activethumbgroup != %3
			,
				set(layer[get(activethumbgroup)].visible, false);
				set(layer[get(activethumbgroup)].enabled, false);
				set(layer[%1].visible, true);
				set(layer[%1].enabled, true);
				set(layer[skin_thumbs].width, get(layer[%1].width));
				set(activethumbgroup, %1);

			,
				trace(is equal);
			);
		);
	</action>
	
	<action name="set_thumbgroup_children_array">
		set(thumbgroup_%3_children_array_%1, %2);
	</action>
	
	<action name="onclicktest">
		<!-- thumbgroup_count, thumbgroup_%3_created, thumbgroup_%3_thumbcount, thumbgroup_%3_parent, layer[thumbgroup_%3_parent].groupindex -->
		if(activethumbgroup == ''
		,
			expand_thumbgroup(%1, %2, %3);
		,
			if(activethumbgroup == %3
			,
				collapse_thumbgroup(%1, %2, %3);

			,
				collapse_thumbgroup(%1, %2, %3);
				expand_thumbgroup(%1, %2, %3);
			);
		);
	</action>
	
	<action name="expand_thumbgroup">
		<!--add(skin_settings.thumbs_totalwidth, get(skin_settings.thumbs_width), get(skin_settings.thumbs_padding));-->

		mul(xoffset, thumbgroup_%3_thumbcount, get(skin_settings.thumbs_totalwidth));
		add(counter_start, get(layer[thumbgroup_%3_parent].groupindex), 1);
		for(set(i, get(counter_start)), i LT thumbgroup_count, inc(i)
		,
			tweengroupparent(get(i), get(xoffset), %3);
		);

		for(set(i, 0), i LT thumbgroup_%3_thumbcount, inc(i)
		,
			tweengroupchildren(get(i), get(xoffset), %3);
		);
		set(activethumbgroup, %3);
		set(activethumbgroupname, thumbgroup_%3_parent);
		set(activethumbgroup_thumbcount, get(thumbgroup_%3_thumbcount));
		set(activethumbgroup_index, get(layer[thumbgroup_%3_parent].groupindex));

		mul(w1, get(thumbgroup_count), get(skin_settings.thumbs_totalwidth));
		mul(w2, get(thumbgroup_%3_thumbcount), get(skin_settings.thumbs_totalwidth));
		add(w3, get(w1), get(w2));
		add(w4, get(skin_settings.thumbs_totalwidth), get(w2));
		tween(layer[skin_thumbs].width, get(w3));
		tween(layer[thumbgroup_%3_parent].width, get(w4));
		
		delayedcall(0.25, layer[skin_thumbs].scrolltocenter(0,0););
	</action>
	
	<action name="collapse_thumbgroup">
		mul(xoffset, get(activethumbgroup_thumbcount), 0);
		add(counter_start, get(activethumbgroup_index), 1);
		for(set(i, get(counter_start)), i LT thumbgroup_count, inc(i)
		,
			tweengroupparentback(get(i), get(xoffset), get(activethumbgroup));
		);
		
		for(set(i, 0), i LT activethumbgroup_thumbcount, inc(i)
		,
			tweengroupchildrenback(get(i), get(xoffset), get(activethumbgroup));
		);
		
		mul(w1, get(thumbgroup_count), get(skin_settings.thumbs_totalwidth));
		tween(layer[skin_thumbs].width, get(w1));
		copy(jj, activethumbgroupname);
		tween(layer[get(jj)].width, get(skin_settings.thumbs_totalwidth));
		
		layer[skin_thumbs].scrolltocenter(0,0);

		set(activethumbgroup, '');
		set(activethumbgroup_thumbcount, '');
		set(activethumbgroup_index, '');
	</action>
	
	<action name="tweengroupparent">
		<!--add(skin_settings.parentthumbs_totalwidth, get(skin_settings.parentthumbs_width), get(skin_settings.parentthumbs_padding));-->
		mul(thumbx, %1, get(skin_settings.thumbs_totalwidth));

		add(finaloffset, get(thumbx), %2);
		mul(speed, get(thumbgroup_%3_thumbcount), 0.2);
		tween(layer[get(thumbgroup_array_%1)].x, get(finaloffset));
	</action>
	
	<action name="tweengroupchildren">
		<!--add(skin_settings.thumbs_totalwidth, get(skin_settings.thumbs_width), get(skin_settings.thumbs_padding));-->
		mul(finaloffset, %1, get(skin_settings.thumbs_totalwidth));
		add(fromparentoffset, get(skin_settings.thumbs_padding), get(skin_settings.thumbs_totalwidth));
		sub(fromparentoffset, get(skin_settings.thumbs_padding));
		add(finaloffset, get(fromparentoffset));
		div(speed, %1, 5);
		tween(layer[get(thumbgroup_%3_children_array_%1)].x, get(finaloffset));
	</action>
	
	<action name="tweengroupparentback">
		<!--add(skin_settings.parentthumbs_totalwidth, get(skin_settings.parentthumbs_width), get(skin_settings.parentthumbs_padding));-->
		mul(finaloffset, %1, get(skin_settings.thumbs_totalwidth));
		mul(speed, get(thumbgroup_%3_thumbcount), 0.2);
		tween(layer[get(thumbgroup_array_%1)].x, get(finaloffset));
	</action>
	
	<action name="tweengroupchildrenback">
		div(speed, %1, 5);
		tween(layer[get(thumbgroup_%3_children_array_%1)].x, get(skin_settings.thumbs_padding));
	</action>
	
	<!--action name="skin_addthumbsss">
		copy(thumbwidth, skin_settings.thumbs_width);
		copy(thumbheight, skin_settings.thumbs_height);
		copy(thumbpadding, skin_settings.thumbs_padding);
		copy(thumbcrop, skin_settings.thumbs_crop);

		if(device.mobile,
			mul(thumbwidth,2);
			mul(thumbheight,2);
			mul(thumbpadding,2);
		  );

		add(thumbxoffset, thumbwidth, thumbpadding);
		mul(thumbxcenter, thumbxoffset, 0.5);
		mul(thumbbarwidth, thumbxoffset, scene.count);
		add(thumbbarwidth, thumbpadding);
		add(thumbbarheight, thumbpadding, thumbheight);
		add(thumbbarheight, thumbpadding);

		if (skin_settings.thumbs_scrollindicator,
			copy(layer[skin_thumbs_scrollindicator].y, thumbbarheight);
			add(thumbbarheight, layer[skin_thumbs_scrollindicator].height);
		);

		copy(layer[skin_thumbs].height, thumbbarheight);
		copy(layer[skin_thumbs].width, thumbbarwidth);

		mul(halfheight, thumbbarheight, 0.5);
		copy(layer[skin_thumbs_scrollleft].y, halfheight);
		copy(layer[skin_thumbs_scrollright].y, halfheight);

		for(set(i,0), i LT scene.count, inc(i)
		,
			process_scene_thumb(get(i), get(scene[get(i)].name), get(scene[get(i)].group));
			
				txtadd(thumbname,'skin_thumb_',get(i));
				addlayer(get(thumbname));
				copy(layer[get(thumbname)].url, scene[get(i)].thumburl);
				set(layer[get(thumbname)].keep, true);
				set(layer[get(thumbname)].parent, 'skin_thumbs');
				set(layer[get(thumbname)].align, lefttop);
				copy(layer[get(thumbname)].crop, thumbcrop);
				copy(layer[get(thumbname)].width, thumbwidth);
				copy(layer[get(thumbname)].height, thumbheight);
				mul(thumbx, i, thumbxoffset);
				add(thumbx, thumbpadding);
				copy(layer[get(thumbname)].x, thumbx);
				copy(layer[get(thumbname)].y, thumbpadding);
				add(scene[get(i)].thumbx, thumbx, thumbxcenter);
				copy(scene[get(i)].thumby, thumbpadding);
				set(layer[get(thumbname)].linkedscene, get(scene[get(i)].name) );
				set(layer[get(thumbname)].onclick, copy(layer[skin_thumbborder].parent, name); loadscene(get(linkedscene), null, MERGE, BLEND(0.5)); );
				
				settitle(get(scene[get(i)].title));
				if(finaltitle != null, set(scene[get(i)].title,get(finaltitle)););
				
				if(skin_settings.tooltips_thumbs,
					set(layer[get(thumbname)].onhover, showtext(get(scene[get(linkedscene)].title),SKIN_TOOLTIPS); );
				  );
				if(skin_settings.thumbs_text,
					txtadd(thumbtext, 'skin_thumbtext_', get(i));
					addlayer(get(thumbtext));
					layer[get(thumbtext)].loadstyle(skin_thumbtext_style);
					set(layer[get(thumbtext)].keep, true);
					set(layer[get(thumbtext)].parent, get(thumbname));
					set(layer[get(thumbtext)].html, get(scene[get(i)].title));
				  );
				
				txtadd(thumbmediaiconname,'skin_thumbmediaicon_',get(i));
				addlayer(get(thumbmediaiconname));
				set(layer[get(thumbmediaiconname)].keep, true);
				set(layer[get(thumbmediaiconname)].parent, get(thumbname));
				set(layer[get(thumbmediaiconname)].enabled, 'false');
				set(layer[get(thumbmediaiconname)].capture, 'false');
				set(layer[get(thumbmediaiconname)].align, bottomleft);  
				if( scene[get(i)].hasvideo
					, set(layer[get(thumbmediaiconname)].url, '%SWFPATH%/skin/panomediaicon.png');
					, set(layer[get(thumbmediaiconname)].url, '%SWFPATH%/skin/panonomediaicon.png');
				);
				if(device.mobile, trace(scale); set(layer[get(thumbmediaiconname)].scale, 2););
		);
	</action-->
</krpano>